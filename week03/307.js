// 실행 컨텍스트 (스코프, 변수, 객체, 호이스팅)

// 실행 컨텍스트는 실행할 코드에 제공할 '환경 정보'들을 모아 놓은 {객체}입니다.
// 1. 선언된 변수를 끌어올리고 (호이스팅)
// 2. 외부 환경 정보를 구성하고,
// 3. this값을 설정합니다.(바운딩)

// 콜스택에 대한 이해를 해봅시다.
// stack 은 무엇일까?
// stack vs queue
// stack 은 바구니 같은 것, queue 는 파이프 같은 것
// stack : Last In, First Out(LIFO)  |  queue : First In, First Out(FIFO)
// stack 은 마지막으로 들어간 것이 첫 번째로 나오고, queue 는 1빠가 1빠로 나온다!

// 우리가 배울 것은 콜 스택이므로 마지막으로 들어간 것이 처음으로 나오는 구조입니다.

// 전역변수 - outer - inner 등 함수가 안으로 안으로 들어가면서 실행되고, 실행되면 사라지고 남는 스택이 실행되고가 반복되는 구조!!

// 그런데 이 outer, inner 이런 것들 하나하나가 다 실행 컨텍스트이다.
// 그렇다면 실행 컨텍스트 = {객체}라고 했는데, 안에 무엇이 들어있을까?

// 3가지가 들어있습니다.

// 1. variableEnvironment
// : 현재 컨텍스트 내의 식별자(record) 정보, 외부 환경 정보 두 가지를 가지고 있다.

// 2. lexicalEnvironment
// : VE와 완전히 같다. 그런데 뭐가 다르냐? LE는 변경 사항을 실시간으로 반영한다.
// 따라서 우리는 LE를 써야한다.

// 3. ThisBinding
// : This 가 function 안에서 어떤 역할을 하는지 결정해주는 것을 this바인딩이라고 함.

// VE 와 LE 는 스냅샷의 유지 여부만 다르다고 할 수 있다.
// 스냅샷은 초기 설정 정보 record 와 outer 입니다.

// 이 record 의 수집 과정이 바로 호이스팅임!!!
